package zhe.ParSy.Factory

import zhe.ParSy.Grammar.Rule
import zhe.ParSy.Grammar.Rule.ABRule
import zhe.ParSy.Grammar.Rule.ProductionRule
import zhe.ParSy.Grammar.Rule.TerminalRule

class RuleFactory(val maxRules: Int) {
    var index: Int
    init {
        index = maxRules
    }

    fun getNextId(): Int {
        index -= 1
        return index
    }

    fun getTerminalRule(tkn: String, isSensitive: Boolean): ProductionRule {
        val rid = this.getNextId()
        return ProductionRule(rid, TerminalRule(tkn, isSensitive))
    }

    fun getABRule(lRule: Int, rRule: Int): ProductionRule {
        val rid: Int = this.getNextId()
        return ProductionRule(rid, ABRule(lRule, rRule))
    }

    fun getABRule(lRule: ProductionRule, rRule: ProductionRule): ProductionRule {
        return getABRule(lRule.id, rRule.id)
    }

    // getProductionRule is mainly used for testing, since usually rules that
    // are not AB rules or terminal rules are only generated by the Grammar
    // Merger.
    fun getProductionRule(rules: Set<Rule>): ProductionRule {
        val rid = this.getNextId()
        return ProductionRule(rid, rules)
    }
}
